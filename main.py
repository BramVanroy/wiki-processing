import json
from pathlib import Path
import re

"""
    Processes the JSON output of WikiExtractor: creates one file per Wikipedia article.
    Filenames are unique and based on the ID and title of the article.
    No preprocessing is done.
"""

def parse_json(line, pdout):
    """
    Parses JSON from line.
    Uses the 'id' and 'title' fields to generate a unique filename.
    Writes 'text' field to the new filename.
    """
    obj = json.loads(line)

    filename = get_valid_filename(obj['title']+'-'+obj['id'])
    initial_dir = pdout.joinpath(filename[0].upper())
    initial_dir.mkdir(exist_ok=True)
    filename = initial_dir.joinpath(filename)

    with open(filename, 'w', encoding='utf-8') as fhout:
        fhout.write(obj['text'])


def get_valid_filename(s):
    """
    Taken from Django

    Return the given string converted to a string that can be used for a clean
    filename. Remove leading and trailing spaces; convert other spaces to
    underscores; and remove anything that is not an alphanumeric, dash,
    underscore, or dot.
    """
    s = str(s).strip().replace(' ', '_')
    return re.sub(r'(?u)[^-\w.]', '', s)


def main(pdin, pdout):
    """
    Iterate over all subdirectories and process all files with 'parse_json'
    """
    file_n = 0
    for pfin in pdin.rglob('*'):
        if not pfin.is_file():
            continue

        file_n += 1
        with open(pfin, 'r', encoding='utf-8') as fhin:
            line_n = 0
            for line in fhin:
                line = line.strip()

                if line == '':
                    continue

                line_n += 1
                if line_n % 1000 == 0:
                    print(f"\rProcessing file {file_n}, article {line_n}", flush=True)
                parse_json(line, pdout)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Process files generated by WikiExtractor and create one file per'
                                                 ' Wikipedia article. Articles are grouped per the initial of'
                                                 ' their title.')
    parser.add_argument('din', help='input directory. All files in all subdirectories will be processed.')
    parser.add_argument('dout', help='output directory.')
    args = parser.parse_args()

    main(Path(args.din).resolve(),
         Path(args.dout).resolve())
